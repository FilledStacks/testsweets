// Mocks generated by Mockito 5.4.2 from annotations
// in testsweets/test/helpers/dart_only_test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:io' as _i4;

import 'package:logger/src/logger.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:testsweets/src/models/build_info.dart' as _i3;
import 'package:testsweets/src/services/automation_keys_service.dart' as _i16;
import 'package:testsweets/src/services/build_service.dart' as _i8;
import 'package:testsweets/src/services/cloud_functions_service.dart' as _i12;
import 'package:testsweets/src/services/dynamic_keys_generator.dart' as _i14;
import 'package:testsweets/src/services/file_system_service.dart' as _i2;
import 'package:testsweets/src/services/http_service.dart' as _i5;
import 'package:testsweets/src/services/runnable_process.dart' as _i10;
import 'package:testsweets/src/services/test_sweets_config_file_service.dart'
    as _i7;
import 'package:testsweets/src/services/time_service.dart' as _i11;
import 'package:testsweets/src/services/upload_service.dart' as _i15;
import 'package:testsweets/testsweets.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileSystemServiceImplementation_0 extends _i1.SmartFake
    implements _i2.FileSystemServiceImplementation {
  _FakeFileSystemServiceImplementation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuildInfo_1 extends _i1.SmartFake implements _i3.BuildInfo {
  _FakeBuildInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProcess_2 extends _i1.SmartFake implements _i4.Process {
  _FakeProcess_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSimpleHttpResponse_3 extends _i1.SmartFake
    implements _i5.SimpleHttpResponse {
  _FakeSimpleHttpResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_5 extends _i1.SmartFake implements _i6.Logger {
  _FakeLogger_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpService_6 extends _i1.SmartFake implements _i5.HttpService {
  _FakeHttpService_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemService_7 extends _i1.SmartFake
    implements _i2.FileSystemService {
  _FakeFileSystemService_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestSweetsConfigFileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestSweetsConfigFileService extends _i1.Mock
    implements _i7.TestSweetsConfigFileService {
  @override
  _i2.FileSystemServiceImplementation get fileSystemService =>
      (super.noSuchMethod(
        Invocation.getter(#fileSystemService),
        returnValue: _FakeFileSystemServiceImplementation_0(
          this,
          Invocation.getter(#fileSystemService),
        ),
        returnValueForMissingStub: _FakeFileSystemServiceImplementation_0(
          this,
          Invocation.getter(#fileSystemService),
        ),
      ) as _i2.FileSystemServiceImplementation);
  @override
  String getValueFromConfigFileByKey(_i7.ConfigFileKeyType? keyType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getValueFromConfigFileByKey,
          [keyType],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [BuildService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildService extends _i1.Mock implements _i8.BuildService {
  @override
  _i9.Future<_i3.BuildInfo> build({
    required String? appType,
    List<String>? extraFlutterProcessArgs,
    String? pathToBuild,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
          {
            #appType: appType,
            #extraFlutterProcessArgs: extraFlutterProcessArgs,
            #pathToBuild: pathToBuild,
          },
        ),
        returnValue: _i9.Future<_i3.BuildInfo>.value(_FakeBuildInfo_1(
          this,
          Invocation.method(
            #build,
            [],
            {
              #appType: appType,
              #extraFlutterProcessArgs: extraFlutterProcessArgs,
              #pathToBuild: pathToBuild,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.BuildInfo>.value(_FakeBuildInfo_1(
          this,
          Invocation.method(
            #build,
            [],
            {
              #appType: appType,
              #extraFlutterProcessArgs: extraFlutterProcessArgs,
              #pathToBuild: pathToBuild,
            },
          ),
        )),
      ) as _i9.Future<_i3.BuildInfo>);
}

/// A class which mocks [FileSystemService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemService extends _i1.Mock implements _i2.FileSystemService {
  @override
  bool doesFileExist(String? path) => (super.noSuchMethod(
        Invocation.method(
          #doesFileExist,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  String readFileAsStringSync(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readFileAsStringSync,
          [path],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i9.Stream<List<int>> openFileForReading(String? path) => (super.noSuchMethod(
        Invocation.method(
          #openFileForReading,
          [path],
        ),
        returnValue: _i9.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i9.Stream<List<int>>.empty(),
      ) as _i9.Stream<List<int>>);
  @override
  int getFileSizeInBytes(String? path) => (super.noSuchMethod(
        Invocation.method(
          #getFileSizeInBytes,
          [path],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String fullPathToWorkingDirectory({String? fileName}) => (super.noSuchMethod(
        Invocation.method(
          #fullPathToWorkingDirectory,
          [],
          {#fileName: fileName},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [FlutterProcess].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterProcess extends _i1.Mock implements _i10.FlutterProcess {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i9.Future<_i4.Process> startWith({required List<String>? args}) =>
      (super.noSuchMethod(
        Invocation.method(
          #startWith,
          [],
          {#args: args},
        ),
        returnValue: _i9.Future<_i4.Process>.value(_FakeProcess_2(
          this,
          Invocation.method(
            #startWith,
            [],
            {#args: args},
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.Process>.value(_FakeProcess_2(
          this,
          Invocation.method(
            #startWith,
            [],
            {#args: args},
          ),
        )),
      ) as _i9.Future<_i4.Process>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i5.HttpService {
  @override
  _i9.Future<_i5.SimpleHttpResponse> putBinary({
    required String? to,
    required _i9.Stream<List<int>>? data,
    required int? contentLength,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putBinary,
          [],
          {
            #to: to,
            #data: data,
            #contentLength: contentLength,
            #headers: headers,
          },
        ),
        returnValue:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #putBinary,
            [],
            {
              #to: to,
              #data: data,
              #contentLength: contentLength,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #putBinary,
            [],
            {
              #to: to,
              #data: data,
              #contentLength: contentLength,
              #headers: headers,
            },
          ),
        )),
      ) as _i9.Future<_i5.SimpleHttpResponse>);
  @override
  _i9.Future<_i5.SimpleHttpResponse> postJson({
    required String? to,
    required Map<String, dynamic>? body,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postJson,
          [],
          {
            #to: to,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #postJson,
            [],
            {
              #to: to,
              #body: body,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #postJson,
            [],
            {
              #to: to,
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i9.Future<_i5.SimpleHttpResponse>);
  @override
  _i9.Future<_i5.SimpleHttpResponse> get({
    required String? to,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #to: to,
            #headers: headers,
          },
        ),
        returnValue:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #get,
            [],
            {
              #to: to,
              #headers: headers,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i5.SimpleHttpResponse>.value(_FakeSimpleHttpResponse_3(
          this,
          Invocation.method(
            #get,
            [],
            {
              #to: to,
              #headers: headers,
            },
          ),
        )),
      ) as _i9.Future<_i5.SimpleHttpResponse>);
}

/// A class which mocks [TimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeService extends _i1.Mock implements _i11.TimeService {
  @override
  DateTime now() => (super.noSuchMethod(
        Invocation.method(
          #now,
          [],
        ),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.method(
            #now,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_4(
          this,
          Invocation.method(
            #now,
            [],
          ),
        ),
      ) as DateTime);
}

/// A class which mocks [CloudFunctionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudFunctionsService extends _i1.Mock
    implements _i12.CloudFunctionsService {
  @override
  _i6.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_5(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_5(
          this,
          Invocation.getter(#log),
        ),
      ) as _i6.Logger);
  @override
  _i5.HttpService get httpService => (super.noSuchMethod(
        Invocation.getter(#httpService),
        returnValue: _FakeHttpService_6(
          this,
          Invocation.getter(#httpService),
        ),
        returnValueForMissingStub: _FakeHttpService_6(
          this,
          Invocation.getter(#httpService),
        ),
      ) as _i5.HttpService);
  @override
  _i9.Future<String> getV4BuildUploadSignedUrl(
    String? projectId,
    String? apiKey, [
    Map<dynamic, dynamic>? extensionHeaders = const {},
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getV4BuildUploadSignedUrl,
          [
            projectId,
            apiKey,
            extensionHeaders,
          ],
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<bool> doesBuildExistInProject(
    String? projectId, {
    required String? withVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doesBuildExistInProject,
          [projectId],
          {#withVersion: withVersion},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<String> uploadWidgetDescriptionToProject({
    required String? projectId,
    required _i13.Interaction? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadWidgetDescriptionToProject,
          [],
          {
            #projectId: projectId,
            #description: description,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<List<_i13.Interaction>> getWidgetDescriptionForProject(
          {required String? projectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWidgetDescriptionForProject,
          [],
          {#projectId: projectId},
        ),
        returnValue:
            _i9.Future<List<_i13.Interaction>>.value(<_i13.Interaction>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i13.Interaction>>.value(<_i13.Interaction>[]),
      ) as _i9.Future<List<_i13.Interaction>>);
  @override
  _i9.Future<String> updateInteraction({
    required String? projectId,
    required _i13.Interaction? oldwidgetDescription,
    required _i13.Interaction? newwidgetDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWidgetDescription,
          [],
          {
            #projectId: projectId,
            #oldwidgetDescription: oldwidgetDescription,
            #newwidgetDescription: newwidgetDescription,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<String> deleteWidgetDescription({
    required String? projectId,
    required _i13.Interaction? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWidgetDescription,
          [],
          {
            #projectId: projectId,
            #description: description,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
}

/// A class which mocks [DynamicKeysGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDynamicKeysGenerator extends _i1.Mock
    implements _i14.DynamicKeysGenerator {
  @override
  _i2.FileSystemService get fileSystemService => (super.noSuchMethod(
        Invocation.getter(#fileSystemService),
        returnValue: _FakeFileSystemService_7(
          this,
          Invocation.getter(#fileSystemService),
        ),
        returnValueForMissingStub: _FakeFileSystemService_7(
          this,
          Invocation.getter(#fileSystemService),
        ),
      ) as _i2.FileSystemService);
  @override
  List<String> generateAutomationKeysForDynamicKey({
    required String? key,
    required int? numberOfAutomationKeysToGenerate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateAutomationKeysForDynamicKey,
          [],
          {
            #key: key,
            #numberOfAutomationKeysToGenerate: numberOfAutomationKeysToGenerate,
          },
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  List<String> generateAutomationKeysFromDynamicKeysFile(
          String? dynamicKeysFilePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateAutomationKeysFromDynamicKeysFile,
          [dynamicKeysFilePath],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
}

/// A class which mocks [UploadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadService extends _i1.Mock implements _i15.UploadService {
  @override
  _i9.Future<void> uploadBuild(
    _i3.BuildInfo? buildInfo,
    String? projectId,
    String? apiKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBuild,
          [
            buildInfo,
            projectId,
            apiKey,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AutomationKeysService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAutomationKeysService extends _i1.Mock
    implements _i16.AutomationKeysService {
  @override
  List<String> extractKeysListFromJson() => (super.noSuchMethod(
        Invocation.method(
          #extractKeysListFromJson,
          [],
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
}
