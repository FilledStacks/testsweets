// Mocks generated by Mockito 5.4.2 from annotations
// in testsweets/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i8;
import 'package:logger/src/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/src/snackbar/snackbar_config.dart' as _i7;
import 'package:stacked_services/src/snackbar/snackbar_service.dart' as _i6;
import 'package:testsweets/src/models/application_models.dart' as _i3;
import 'package:testsweets/src/services/cloud_functions_service.dart' as _i12;
import 'package:testsweets/src/services/http_service.dart' as _i4;
import 'package:testsweets/src/services/notification_extractor.dart' as _i17;
import 'package:testsweets/src/services/reactive_scrollable.dart' as _i14;
import 'package:testsweets/src/services/scroll_appliance.dart' as _i16;
import 'package:testsweets/src/services/test_integrity.dart' as _i13;
import 'package:testsweets/src/services/testsweets_route_tracker.dart' as _i11;
import 'package:testsweets/src/services/widget_capture_service.dart' as _i10;
import 'package:testsweets/src/ui/shared/find_scrollables.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInteraction_1 extends _i1.SmartFake implements _i3.Interaction {
  _FakeInteraction_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpService_2 extends _i1.SmartFake implements _i4.HttpService {
  _FakeHttpService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollableDescription_3 extends _i1.SmartFake
    implements _i3.ScrollableDescription {
  _FakeScrollableDescription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_4 extends _i1.SmartFake implements _i5.Offset {
  _FakeOffset_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackbarService extends _i1.Mock implements _i6.SnackbarService {
  @override
  bool get isSnackbarOpen => (super.noSuchMethod(
        Invocation.getter(#isSnackbarOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void registerSnackbarConfig(_i7.SnackbarConfig? config) => super.noSuchMethod(
        Invocation.method(
          #registerSnackbarConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomMainButtonBuilder({
    dynamic variant,
    _i8.Widget Function(
      String?,
      Function?,
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomMainButtonBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomSnackbarConfig({
    required dynamic variant,
    _i7.SnackbarConfig? config,
    _i7.SnackbarConfig Function()? configBuilder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomSnackbarConfig,
          [],
          {
            #variant: variant,
            #config: config,
            #configBuilder: configBuilder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSnackbar({
    String? title = r'',
    required String? message,
    dynamic Function(dynamic)? onTap,
    Duration? duration,
    String? mainButtonTitle,
    void Function()? onMainButtonTapped,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackbar,
          [],
          {
            #title: title,
            #message: message,
            #onTap: onTap,
            #duration: duration,
            #mainButtonTitle: mainButtonTitle,
            #onMainButtonTapped: onMainButtonTapped,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<dynamic>? showCustomSnackBar({
    required String? message,
    _i8.TextStyle? messageTextStyle,
    required dynamic variant,
    String? title,
    _i8.TextStyle? titleTextStyle,
    String? mainButtonTitle,
    _i8.ButtonStyle? mainButtonStyle,
    void Function()? onMainButtonTapped,
    Function? onTap,
    Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSnackBar,
          [],
          {
            #message: message,
            #messageTextStyle: messageTextStyle,
            #variant: variant,
            #title: title,
            #titleTextStyle: titleTextStyle,
            #mainButtonTitle: mainButtonTitle,
            #mainButtonStyle: mainButtonStyle,
            #onMainButtonTapped: onMainButtonTapped,
            #onTap: onTap,
            #duration: duration,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<dynamic>?);
  @override
  _i9.Future<void> closeSnackbar() => (super.noSuchMethod(
        Invocation.method(
          #closeSnackbar,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [WidgetCaptureService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWidgetCaptureService extends _i1.Mock
    implements _i10.WidgetCaptureService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  Map<String, List<_i3.Interaction>> get widgetDescriptionMap =>
      (super.noSuchMethod(
        Invocation.getter(#widgetDescriptionMap),
        returnValue: <String, List<_i3.Interaction>>{},
        returnValueForMissingStub: <String, List<_i3.Interaction>>{},
      ) as Map<String, List<_i3.Interaction>>);
  @override
  bool get verbose => (super.noSuchMethod(
        Invocation.getter(#verbose),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set projectId(String? projectId) => super.noSuchMethod(
        Invocation.setter(
          #projectId,
          projectId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set addWidgetDescriptionToMap(_i3.Interaction? description) =>
      super.noSuchMethod(
        Invocation.setter(
          #addWidgetDescriptionToMap,
          description,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> loadWidgetDescriptionsForProject() => (super.noSuchMethod(
        Invocation.method(
          #loadWidgetDescriptionsForProject,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i3.Interaction> saveInteractionInDatabase(
          _i3.Interaction? interaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveInteractionInDatabase,
          [interaction],
        ),
        returnValue: _i9.Future<_i3.Interaction>.value(_FakeInteraction_1(
          this,
          Invocation.method(
            #saveInteractionInDatabase,
            [interaction],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.Interaction>.value(_FakeInteraction_1(
          this,
          Invocation.method(
            #saveInteractionInDatabase,
            [interaction],
          ),
        )),
      ) as _i9.Future<_i3.Interaction>);
  @override
  _i9.Future<void> updateInteractionInDatabase({
    required _i3.Interaction? updatedInteraction,
    required _i3.Interaction? oldInteraction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInteractionInDatabase,
          [],
          {
            #updatedInteraction: updatedInteraction,
            #oldInteraction: oldInteraction,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeInteractionFromDatabase(
          _i3.Interaction? interaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeInteractionFromDatabase,
          [interaction],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i3.Interaction> captureView(String? originalViewName) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureView,
          [originalViewName],
        ),
        returnValue: _i9.Future<_i3.Interaction>.value(_FakeInteraction_1(
          this,
          Invocation.method(
            #captureView,
            [originalViewName],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.Interaction>.value(_FakeInteraction_1(
          this,
          Invocation.method(
            #captureView,
            [originalViewName],
          ),
        )),
      ) as _i9.Future<_i3.Interaction>);
  @override
  List<_i3.Interaction> getDescriptionsForView(
          {required String? currentRoute}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDescriptionsForView,
          [],
          {#currentRoute: currentRoute},
        ),
        returnValue: <_i3.Interaction>[],
        returnValueForMissingStub: <_i3.Interaction>[],
      ) as List<_i3.Interaction>);
  @override
  bool checkCurrentViewIfAlreadyCaptured(String? originalViewName) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkCurrentViewIfAlreadyCaptured,
          [originalViewName],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void syncRouteInteractions(
    String? routeName,
    List<_i3.Interaction>? interactions,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #syncRouteInteractions,
          [
            routeName,
            interactions,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TestSweetsRouteTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestSweetsRouteTracker extends _i1.Mock
    implements _i11.TestSweetsRouteTracker {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  bool get testMode => (super.noSuchMethod(
        Invocation.getter(#testMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set testMode(bool? _testMode) => super.noSuchMethod(
        Invocation.setter(
          #testMode,
          _testMode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, int> get indexedRouteStateMap => (super.noSuchMethod(
        Invocation.getter(#indexedRouteStateMap),
        returnValue: <String, int>{},
        returnValueForMissingStub: <String, int>{},
      ) as Map<String, int>);
  @override
  set indexedRouteStateMap(Map<String, int>? _indexedRouteStateMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #indexedRouteStateMap,
          _indexedRouteStateMap,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get previosRoute => (super.noSuchMethod(
        Invocation.getter(#previosRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set previosRoute(String? _previosRoute) => super.noSuchMethod(
        Invocation.setter(
          #previosRoute,
          _previosRoute,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get formatedCurrentRoute => (super.noSuchMethod(
        Invocation.getter(#formatedCurrentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setCurrentRoute(String? route) => super.noSuchMethod(
        Invocation.method(
          #setCurrentRoute,
          [route],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRoute(String? route) => super.noSuchMethod(
        Invocation.method(
          #setRoute,
          [route],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeRouteIndex(
    String? viewName,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeRouteIndex,
          [
            viewName,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveRouteIndex(
    String? viewName,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #saveRouteIndex,
          [
            viewName,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void loadRouteIndexIfExist(String? viewName) => super.noSuchMethod(
        Invocation.method(
          #loadRouteIndexIfExist,
          [viewName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CloudFunctionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudFunctionsService extends _i1.Mock
    implements _i12.CloudFunctionsService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  _i4.HttpService get httpService => (super.noSuchMethod(
        Invocation.getter(#httpService),
        returnValue: _FakeHttpService_2(
          this,
          Invocation.getter(#httpService),
        ),
        returnValueForMissingStub: _FakeHttpService_2(
          this,
          Invocation.getter(#httpService),
        ),
      ) as _i4.HttpService);
  @override
  _i9.Future<String> getV4BuildUploadSignedUrl(
    String? projectId,
    String? apiKey, [
    Map<dynamic, dynamic>? extensionHeaders = const {},
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getV4BuildUploadSignedUrl,
          [
            projectId,
            apiKey,
            extensionHeaders,
          ],
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<bool> doesBuildExistInProject(
    String? projectId, {
    required String? withVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doesBuildExistInProject,
          [projectId],
          {#withVersion: withVersion},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
  @override
  _i9.Future<String> uploadWidgetDescriptionToProject({
    required String? projectId,
    required _i3.Interaction? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadWidgetDescriptionToProject,
          [],
          {
            #projectId: projectId,
            #description: description,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<List<_i3.Interaction>> getWidgetDescriptionForProject(
          {required String? projectId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWidgetDescriptionForProject,
          [],
          {#projectId: projectId},
        ),
        returnValue:
            _i9.Future<List<_i3.Interaction>>.value(<_i3.Interaction>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i3.Interaction>>.value(<_i3.Interaction>[]),
      ) as _i9.Future<List<_i3.Interaction>>);
  @override
  _i9.Future<String> updateWidgetDescription({
    required String? projectId,
    required _i3.Interaction? oldwidgetDescription,
    required _i3.Interaction? newwidgetDescription,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateWidgetDescription,
          [],
          {
            #projectId: projectId,
            #oldwidgetDescription: oldwidgetDescription,
            #newwidgetDescription: newwidgetDescription,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
  @override
  _i9.Future<String> deleteWidgetDescription({
    required String? projectId,
    required _i3.Interaction? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWidgetDescription,
          [],
          {
            #projectId: projectId,
            #description: description,
          },
        ),
        returnValue: _i9.Future<String>.value(''),
        returnValueForMissingStub: _i9.Future<String>.value(''),
      ) as _i9.Future<String>);
}

/// A class which mocks [TestIntegrity].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestIntegrity extends _i1.Mock implements _i13.TestIntegrity {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  set triggeringNotificationType(Type? _triggeringNotificationType) =>
      super.noSuchMethod(
        Invocation.setter(
          #triggeringNotificationType,
          _triggeringNotificationType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void failCommand() => super.noSuchMethod(
        Invocation.method(
          #failCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void confirmCommand() => super.noSuchMethod(
        Invocation.method(
          #confirmCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void whenNotificationTypeMatchesConfirmCommand(
          _i8.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #whenNotificationTypeMatchesConfirmCommand,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<bool> trueIfCommandVerifiedOrFalseIfTimeout(
          Duration? timeoutDuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #trueIfCommandVerifiedOrFalseIfTimeout,
          [timeoutDuration],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}

/// A class which mocks [ReactiveScrollable].
///
/// See the documentation for Mockito's code generation for more information.
class MockReactiveScrollable extends _i1.Mock
    implements _i14.ReactiveScrollable {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  _i3.ScrollableDescription get currentScrollableDescription =>
      (super.noSuchMethod(
        Invocation.getter(#currentScrollableDescription),
        returnValue: _FakeScrollableDescription_3(
          this,
          Invocation.getter(#currentScrollableDescription),
        ),
        returnValueForMissingStub: _FakeScrollableDescription_3(
          this,
          Invocation.getter(#currentScrollableDescription),
        ),
      ) as _i3.ScrollableDescription);
  @override
  set currentScrollableDescription(
          _i3.ScrollableDescription? _currentScrollableDescription) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentScrollableDescription,
          _currentScrollableDescription,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i3.Interaction> filterAffectedInteractionsByScrollable(
          List<_i3.Interaction>? viewDescription) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterAffectedInteractionsByScrollable,
          [viewDescription],
        ),
        returnValue: <_i3.Interaction>[],
        returnValueForMissingStub: <_i3.Interaction>[],
      ) as Iterable<_i3.Interaction>);
  @override
  _i5.Offset calculateOffsetDeviation(
    _i3.ScrollableDescription? scrollableDescription,
    _i3.Interaction? interaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateOffsetDeviation,
          [
            scrollableDescription,
            interaction,
          ],
        ),
        returnValue: _FakeOffset_4(
          this,
          Invocation.method(
            #calculateOffsetDeviation,
            [
              scrollableDescription,
              interaction,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeOffset_4(
          this,
          Invocation.method(
            #calculateOffsetDeviation,
            [
              scrollableDescription,
              interaction,
            ],
          ),
        ),
      ) as _i5.Offset);
  @override
  Iterable<_i3.Interaction> moveInteractionsWithScrollable(
          Iterable<_i3.Interaction>? affectedInteractions) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveInteractionsWithScrollable,
          [affectedInteractions],
        ),
        returnValue: <_i3.Interaction>[],
        returnValueForMissingStub: <_i3.Interaction>[],
      ) as Iterable<_i3.Interaction>);
}

/// A class which mocks [FindScrollables].
///
/// See the documentation for Mockito's code generation for more information.
class MockFindScrollables extends _i1.Mock implements _i15.FindScrollables {
  @override
  set foundedElements(Iterable<_i8.Element>? _foundedElements) =>
      super.noSuchMethod(
        Invocation.setter(
          #foundedElements,
          _foundedElements,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void searchForScrollableElements() => super.noSuchMethod(
        Invocation.method(
          #searchForScrollableElements,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i3.ScrollableDescription> convertElementsToScrollDescriptions() =>
      (super.noSuchMethod(
        Invocation.method(
          #convertElementsToScrollDescriptions,
          [],
        ),
        returnValue: <_i3.ScrollableDescription>[],
        returnValueForMissingStub: <_i3.ScrollableDescription>[],
      ) as Iterable<_i3.ScrollableDescription>);
}

/// A class which mocks [ScrollAppliance].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollAppliance extends _i1.Mock implements _i16.ScrollAppliance {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  _i3.Interaction applyScrollableOnInteraction(
    Iterable<_i3.ScrollableDescription>? scrollables,
    _i3.Interaction? interaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyScrollableOnInteraction,
          [
            scrollables,
            interaction,
          ],
        ),
        returnValue: _FakeInteraction_1(
          this,
          Invocation.method(
            #applyScrollableOnInteraction,
            [
              scrollables,
              interaction,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeInteraction_1(
          this,
          Invocation.method(
            #applyScrollableOnInteraction,
            [
              scrollables,
              interaction,
            ],
          ),
        ),
      ) as _i3.Interaction);
  @override
  _i3.Interaction storeDescriptionInScrollableExternalities(
    Iterable<_i3.ScrollableDescription>? scrollablesBelowInteraction,
    _i3.Interaction? interaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeDescriptionInScrollableExternalities,
          [
            scrollablesBelowInteraction,
            interaction,
          ],
        ),
        returnValue: _FakeInteraction_1(
          this,
          Invocation.method(
            #storeDescriptionInScrollableExternalities,
            [
              scrollablesBelowInteraction,
              interaction,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeInteraction_1(
          this,
          Invocation.method(
            #storeDescriptionInScrollableExternalities,
            [
              scrollablesBelowInteraction,
              interaction,
            ],
          ),
        ),
      ) as _i3.Interaction);
  @override
  _i3.Interaction storeDescriptionInExternalities(
    Iterable<_i3.ScrollableDescription>? scrollablesBelowInteraction,
    _i3.Interaction? interaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeDescriptionInExternalities,
          [
            scrollablesBelowInteraction,
            interaction,
          ],
        ),
        returnValue: _FakeInteraction_1(
          this,
          Invocation.method(
            #storeDescriptionInExternalities,
            [
              scrollablesBelowInteraction,
              interaction,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeInteraction_1(
          this,
          Invocation.method(
            #storeDescriptionInExternalities,
            [
              scrollablesBelowInteraction,
              interaction,
            ],
          ),
        ),
      ) as _i3.Interaction);
  @override
  _i3.ScrollableDescription findBiggestScrollable(
          Iterable<_i3.ScrollableDescription>? scrollablesBelowInteraction) =>
      (super.noSuchMethod(
        Invocation.method(
          #findBiggestScrollable,
          [scrollablesBelowInteraction],
        ),
        returnValue: _FakeScrollableDescription_3(
          this,
          Invocation.method(
            #findBiggestScrollable,
            [scrollablesBelowInteraction],
          ),
        ),
        returnValueForMissingStub: _FakeScrollableDescription_3(
          this,
          Invocation.method(
            #findBiggestScrollable,
            [scrollablesBelowInteraction],
          ),
        ),
      ) as _i3.ScrollableDescription);
}

/// A class which mocks [NotificationExtractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationExtractor extends _i1.Mock
    implements _i17.NotificationExtractor {
  @override
  bool onlyScrollUpdateNotification(_i8.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #onlyScrollUpdateNotification,
          [notification],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.ScrollableDescription notificationToScrollableDescription(
          _i8.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #notificationToScrollableDescription,
          [notification],
        ),
        returnValue: _FakeScrollableDescription_3(
          this,
          Invocation.method(
            #notificationToScrollableDescription,
            [notification],
          ),
        ),
        returnValueForMissingStub: _FakeScrollableDescription_3(
          this,
          Invocation.method(
            #notificationToScrollableDescription,
            [notification],
          ),
        ),
      ) as _i3.ScrollableDescription);
  @override
  List<_i3.Interaction> scrollInteractions(
    _i3.ScrollableDescription? scrollableDescription,
    List<_i3.Interaction>? viewInteractions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scrollInteractions,
          [
            scrollableDescription,
            viewInteractions,
          ],
        ),
        returnValue: <_i3.Interaction>[],
        returnValueForMissingStub: <_i3.Interaction>[],
      ) as List<_i3.Interaction>);
  @override
  _i3.Interaction syncInteractionWithScrollable(_i3.Interaction? interaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncInteractionWithScrollable,
          [interaction],
        ),
        returnValue: _FakeInteraction_1(
          this,
          Invocation.method(
            #syncInteractionWithScrollable,
            [interaction],
          ),
        ),
        returnValueForMissingStub: _FakeInteraction_1(
          this,
          Invocation.method(
            #syncInteractionWithScrollable,
            [interaction],
          ),
        ),
      ) as _i3.Interaction);
}
